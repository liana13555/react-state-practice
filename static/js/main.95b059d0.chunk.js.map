{"version":3,"sources":["Collapsible/Collapsible.styled.jsx","Collapsible/Collapsible.jsx","App/App.styled.jsx","Tooltip/Tooltip.jsx","DropdownMenu/DropdownMenu.styled.jsx","DropdownMenu/DropdownMenu.jsx","DropdownMenu/DropdownMenuItem.jsx","VideoList/VideoList.jsx","App/App.jsx","constants/theme.js","index.js"],"names":["Container","styled","div","Button","button","Collapsible","state","isOpen","toggle","setState","prevState","children","this","props","type","onClick","Component","Tooltip","ReachTooltip","theme","colors","white","black","MenuButton","ReachMenuButton","MenuItem","ReachMenuItem","DropdownMenu","DropdownMenuItem","onSelect","VideoList","videos","map","video","link","id","App","selectedVideo","selectVideo","alert","size","color","label","url","Object","freeze","green","red","blue","primaryText","secondaryText","spacing","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uzBAEaA,EAAYC,IAAOC,IAAV,iEAKTC,EAASF,IAAOG,OAAV,mD,OCJNC,EAAb,4MACIC,MAAQ,CACJC,QAAQ,GAFhB,EAKIC,OAAS,WACL,EAAKC,UAAS,SAACC,GACX,MAAO,CACJH,QAASG,EAAUH,YARlC,4CAcI,WACI,IAAQI,EAAaC,KAAKC,MAAlBF,SACAJ,EAAWK,KAAKN,MAAhBC,OAER,OACI,eAACP,EAAD,WACI,cAACG,EAAD,CAAQW,KAAK,SAASC,QAASH,KAAKJ,OAApC,SACKD,EAAS,6CAAY,qDAEzBA,GAAUI,SAvB3B,GAAiCK,aCDpBhB,EAAYC,IAAOC,IAAV,+C,QCETe,G,MAAUhB,YAAOiB,IAAPjB,CAAH,6GAGT,SAAAY,GAAK,OAAIA,EAAMM,MAAMC,OAAOC,SACjB,SAAAR,GAAK,OAAIA,EAAMM,MAAMC,OAAOE,U,QCLrCC,EAAatB,YAAOuB,IAAPvB,CAAH,uLAUVwB,EAAWxB,YAAOyB,IAAPzB,CAAH,oKCTR0B,G,MAAe,SAAC,GAAkB,IAAhBhB,EAAe,EAAfA,SAC3B,OACI,eAAC,IAAD,WACI,eAACY,EAAD,sBACY,sBAAM,iBAAN,uBAEZ,cAAC,IAAD,UAAWZ,SCAViB,EAAmB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUlB,EAAe,EAAfA,SACzC,OACC,cAACc,EAAD,CAAUI,SAAUA,EAApB,SAAgClB,KCZxBmB,EAAY,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQF,EAAe,EAAfA,SAClC,OACE,6BACGE,EAAOC,KAAI,SAAAC,GAAK,OACf,oBAAmBlB,QAAS,kBAAMc,EAASI,EAAMC,OAAjD,SACGD,EAAMC,MADAD,EAAME,U,QCQVC,EAAb,4MACE9B,MAAQ,CACL+B,cAAe,MAFpB,EAKIC,YAAc,SAAAJ,GACd,EAAKzB,SAAS,CAAE4B,cAAeH,KANnC,4CASE,WACE,IAAQG,EAAkBzB,KAAKN,MAAvB+B,cAER,OACE,eAAC,EAAD,WACA,eAAC,EAAD,WACE,eAAC,EAAD,CAAkBR,SAAU,kBAAMU,MAAM,WAAxC,UACE,cAAC,IAAD,CAASC,KAAM,GAAIC,MAAM,SAD3B,YAGA,cAAC,EAAD,CAAkBZ,SAAU,kBAAMU,MAAM,SAAxC,qBAUF,cAACtB,EAAD,CAASyB,MAAQ,iBAAjB,SACE,6CAGF,cAAC,EAAD,sBAEA,kDAAqBL,KACrB,cAAC,EAAD,CAAWN,OAAQA,EAAQF,SAAUjB,KAAK0B,cAEzCD,GAAiB,cAAC,IAAD,CAAaM,IAAKN,WArC1C,GAAyBrB,aCZZG,EAAQyB,OAAOC,OAAO,CACjCzB,OAAQ,CACNC,MAAO,UACPC,MAAO,UACPwB,MAAO,UACPC,IAAK,UACLC,KAAM,UACNC,YAAa,UACbC,cAAe,WAEjBC,QAAS,SAAAC,GAAK,gBAAO,EAAIA,EAAX,SCHhBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAepC,MAAOA,EAAtB,SACE,cAAC,EAAD,QAGJqC,SAASC,eAAe,W","file":"static/js/main.95b059d0.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Container = styled.div`\r\n  display: grid;\r\n  grid-gap: 32px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  width: fit-content;\r\n`;","import { Component } from 'react';\r\nimport { Container, Button } from './Collapsible.styled';\r\n\r\nexport class Collapsible extends Component {\r\n    state = {\r\n        isOpen: false,\r\n    };\r\n\r\n    toggle = () => {\r\n        this.setState((prevState) => {\r\n            return {\r\n               isOpen: !prevState.isOpen,\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        const { children } = this.props;\r\n        const { isOpen } = this.state;\r\n\r\n        return (\r\n            <Container>\r\n                <Button type=\"button\" onClick={this.toggle}>\r\n                    {isOpen ? 'Закрыть' : 'Показать'}\r\n                </Button>\r\n                {isOpen && children}\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\n//{this.state.isOpen && this.props.children} - если isOpen true, то правая часть не зарендерится\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Container = styled.div`\r\n   padding: 24px;\r\n`;","import styled from '@emotion/styled';\r\nimport ReachTooltip from \"@reach/tooltip\";\r\nimport \"@reach/tooltip/styles.css\";\r\n\r\nexport const Tooltip = styled(ReachTooltip)`\r\n  padding: 8px;\r\n  border-radius: 4px;\r\n  color: ${props => props.theme.colors.white};\r\n  background-color: ${props => props.theme.colors.black};\r\n`;\r\n\r\n// export const Tooltip = ({label, children }) => {\r\n//     return <ReachTooltip label={label}>{children}</ReachTooltip>\r\n\r\n// };  - удаляем .. потому что оригинальный Tooltip ожидает label и рендерит children\r\n\r\n\r\n// Если на проекте захотим иконки обернуть в Tooltip, тогда иконки надо обернуть в <span> или в <div>","import styled from '@emotion/styled';\r\nimport { MenuButton as ReachMenuButton, MenuItem as ReachMenuItem} from \"@reach/menu-button\";\r\n\r\nexport const MenuButton = styled(ReachMenuButton)`\r\n    background-color: tomato;\r\n    margin-right: 20px;\r\n    margin-bottom: 20px;\r\n\r\n    &[aria-expanded=\"true\"] {\r\n        background-color: blue;\r\n    }\r\n`\r\n\r\nexport const MenuItem = styled(ReachMenuItem)`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  &[data-selected] {\r\n  background: orange;\r\n  }\r\n\r\n  svg{\r\n      margin-right: 8px;\r\n  };\r\n`\r\n\r\n//Если нет svg используем grid:\r\n\r\n// display: grid;\r\n// grid-gap: 20px;\r\n","import { Menu, MenuList } from \"@reach/menu-button\";\r\nimport { MenuButton } from './DropdownMenu.styled';\r\nimport \"@reach/menu-button/styles.css\";\r\n\r\nexport const DropdownMenu = ({ children }) => {\r\n    return (\r\n        <Menu>\r\n            <MenuButton>\r\n                Actions <span aria-hidden>▾</span>\r\n            </MenuButton>\r\n            <MenuList>{children}</MenuList>\r\n        </Menu>\r\n    );\r\n};","// {       <MenuItem onSelect={() => alert(\"Download\")}>Download</MenuItem>\r\n//         <MenuItem onSelect={() => alert(\"Copy\")}>Create a Copy</MenuItem>\r\n//         <MenuItem onSelect={() => alert(\"Mark as Draft\")}>\r\n//           Mark as Draft\r\n//         </MenuItem>\r\n//         <MenuItem onSelect={() => alert(\"Delete\")}>Delete</MenuItem>}\r\n\r\n\r\nimport { MenuItem } from './DropdownMenu.styled';\r\n\r\nexport const DropdownMenuItem = ({ onSelect, children }) => {\r\n    return (\r\n     <MenuItem onSelect={onSelect}>{ children }</MenuItem>\r\n    )\r\n}\r\n","export const VideoList = ({ videos, onSelect }) => {\r\n  return (\r\n    <ul>\r\n      {videos.map(video => (\r\n        <li key={video.id} onClick={() => onSelect(video.link)}>\r\n          {video.link}\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};","import { Component } from 'react';\nimport ReactPlayer from 'react-player';\nimport { FaTrash } from 'react-icons/fa';\nimport { Collapsible } from '../Collapsible/Collapsible';\nimport { Container } from './App.styled';\nimport { Tooltip } from '../Tooltip/Tooltip';\nimport { DropdownMenu } from '../DropdownMenu/DropdownMenu';\nimport { DropdownMenuItem } from '../DropdownMenu/DropdownMenuItem';\nimport { VideoList } from '../VideoList/VideoList';\nimport videos from '../videos.json';\n\n\nexport class App extends Component {\n  state = {\n     selectedVideo: null,  \n  }\n\n    selectVideo = link => {\n    this.setState({ selectedVideo: link });\n  };\n\n  render() {\n    const { selectedVideo } = this.state;\n\n    return (\n      <Container >\n      <DropdownMenu>\n        <DropdownMenuItem onSelect={() => alert(\"Delete\")}>\n          <FaTrash size={16} color=\"blue\" />          \n          Delete</DropdownMenuItem>\n        <DropdownMenuItem onSelect={() => alert(\"Edit\")}>Edit</DropdownMenuItem>\n      </DropdownMenu> \n\n      {/* <DropdownMenu>\n        <DropdownMenuItem>Create</DropdownMenuItem>\n        <DropdownMenuItem>Update</DropdownMenuItem>\n      </DropdownMenu> */}\n      \n\n\n      <Tooltip label = \"TOOOOOOOOOLTIP\">\n        <button>Hello</button>\n      </Tooltip>\n\n      <Collapsible>Content</Collapsible>\n        \n      <h1>Selected video: {selectedVideo}</h1>\n      <VideoList videos={videos} onSelect={this.selectVideo} />\n\n      {selectedVideo && <ReactPlayer url={selectedVideo}/>}\n        {/* <ReactPlayer url='https://www.youtube.com/watch?v=ysz5S6PUM-U' controls/> */}\n\n    </Container>\n  );\n  }\n\n}\n\nexport default App;\n\n//Обычно player делают без controls ии настраивают сами","export const theme = Object.freeze({\n  colors: {\n    white: '#ffffff',\n    black: '#010101',\n    green: '#4caf50',\n    red: '#f44336',\n    blue: '#2196f3',\n    primaryText: '#212121',\n    secondaryText: '#757575',\n  },\n  spacing: value => `${4 * value}px`,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from '@emotion/react';\nimport './index.css';\nimport { App } from './App/App.jsx';\nimport { theme } from './constants/theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}